// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hamilton.proto

#ifndef PROTOBUF_INCLUDED_hamilton_2eproto
#define PROTOBUF_INCLUDED_hamilton_2eproto

#include <google/protobuf/stubs/common.h>
#include <string>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h> // IWYU pragma: export
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/message.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h> // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_hamilton_2eproto

namespace cbdc {
    namespace transaction {
        struct full_tx;
    }
}

namespace protobuf_hamilton_2eproto {
    // Internal implementation detail -- do not use these members.
    struct TableStruct {
        static const ::google::protobuf::internal::ParseTableField entries[];
        static const ::google::protobuf::internal::AuxillaryParseTableField
            aux[];
        static const ::google::protobuf::internal::ParseTable schema[5];
        static const ::google::protobuf::internal::FieldMetadata
            field_metadata[];
        static const ::google::protobuf::internal::SerializationTable
            serialization_table[];
        static const ::google::protobuf::uint32 offsets[];
    };
    void AddDescriptors();
} // namespace protobuf_hamilton_2eproto
namespace proto {
    namespace hamilton {
        class Input;
        class InputDefaultTypeInternal;
        extern InputDefaultTypeInternal _Input_default_instance_;
        class OutPoint;
        class OutPointDefaultTypeInternal;
        extern OutPointDefaultTypeInternal _OutPoint_default_instance_;
        class Output;
        class OutputDefaultTypeInternal;
        extern OutputDefaultTypeInternal _Output_default_instance_;
        class TxRequest;
        class TxRequestDefaultTypeInternal;
        extern TxRequestDefaultTypeInternal _TxRequest_default_instance_;
        class TxResponse;
        class TxResponseDefaultTypeInternal;
        extern TxResponseDefaultTypeInternal _TxResponse_default_instance_;
    } // namespace hamilton
} // namespace proto
namespace google {
    namespace protobuf {
        template<>
        ::proto::hamilton::Input*
        Arena::CreateMaybeMessage<::proto::hamilton::Input>(Arena*);
        template<>
        ::proto::hamilton::OutPoint*
        Arena::CreateMaybeMessage<::proto::hamilton::OutPoint>(Arena*);
        template<>
        ::proto::hamilton::Output*
        Arena::CreateMaybeMessage<::proto::hamilton::Output>(Arena*);
        template<>
        ::proto::hamilton::TxRequest*
        Arena::CreateMaybeMessage<::proto::hamilton::TxRequest>(Arena*);
        template<>
        ::proto::hamilton::TxResponse*
        Arena::CreateMaybeMessage<::proto::hamilton::TxResponse>(Arena*);
    } // namespace protobuf
} // namespace google
namespace proto {
    namespace hamilton {

        // ===================================================================

        class OutPoint
            : public ::google::protobuf::
                  Message /* @@protoc_insertion_point(class_definition:proto.hamilton.OutPoint)
                           */
        {
          public:
            OutPoint();
            virtual ~OutPoint();

            OutPoint(const OutPoint& from);

            inline OutPoint& operator=(const OutPoint& from) {
                CopyFrom(from);
                return *this;
            }
#if LANG_CXX11
            OutPoint(OutPoint&& from) noexcept : OutPoint() {
                *this = ::std::move(from);
            }

            inline OutPoint& operator=(OutPoint&& from) noexcept {
                if(GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
                    if(this != &from)
                        InternalSwap(&from);
                } else {
                    CopyFrom(from);
                }
                return *this;
            }
#endif
            static const ::google::protobuf::Descriptor* descriptor();
            static const OutPoint& default_instance();

            static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
            static inline const OutPoint* internal_default_instance() {
                return reinterpret_cast<const OutPoint*>(
                    &_OutPoint_default_instance_);
            }
            static constexpr int kIndexInFileMessages = 0;

            void Swap(OutPoint* other);
            friend void swap(OutPoint& a, OutPoint& b) {
                a.Swap(&b);
            }

            // implements Message
            // ----------------------------------------------

            inline OutPoint* New() const final {
                return CreateMaybeMessage<OutPoint>(NULL);
            }

            OutPoint* New(::google::protobuf::Arena* arena) const final {
                return CreateMaybeMessage<OutPoint>(arena);
            }
            void CopyFrom(const ::google::protobuf::Message& from) final;
            void MergeFrom(const ::google::protobuf::Message& from) final;
            void CopyFrom(const OutPoint& from);
            void MergeFrom(const OutPoint& from);
            void Clear() final;
            bool IsInitialized() const final;

            size_t ByteSizeLong() const final;
            bool MergePartialFromCodedStream(
                ::google::protobuf::io::CodedInputStream* input) final;
            void SerializeWithCachedSizes(
                ::google::protobuf::io::CodedOutputStream* output) const final;
            ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
                bool deterministic,
                ::google::protobuf::uint8* target) const final;
            int GetCachedSize() const final {
                return _cached_size_.Get();
            }

          private:
            void SharedCtor();
            void SharedDtor();
            void SetCachedSize(int size) const final;
            void InternalSwap(OutPoint* other);

          private:
            inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
                return NULL;
            }
            inline void* MaybeArenaPtr() const {
                return NULL;
            }

          public:
            ::google::protobuf::Metadata GetMetadata() const final;

            // nested types
            // ----------------------------------------------------

            // accessors
            // -------------------------------------------------------

            // string m_tx_id = 1;
            void clear_m_tx_id();
            static const int kMTxIdFieldNumber = 1;
            const ::std::string& m_tx_id() const;
            void set_m_tx_id(const ::std::string& value);
#if LANG_CXX11
            void set_m_tx_id(::std::string&& value);
#endif
            void set_m_tx_id(const char* value);
            void set_m_tx_id(const char* value, size_t size);
            ::std::string* mutable_m_tx_id();
            ::std::string* release_m_tx_id();
            void set_allocated_m_tx_id(::std::string* m_tx_id);

            // uint64 m_index = 2;
            void clear_m_index();
            static const int kMIndexFieldNumber = 2;
            ::google::protobuf::uint64 m_index() const;
            void set_m_index(::google::protobuf::uint64 value);

            // @@protoc_insertion_point(class_scope:proto.hamilton.OutPoint)
          private:
            ::google::protobuf::internal::InternalMetadataWithArena
                _internal_metadata_;
            ::google::protobuf::internal::ArenaStringPtr m_tx_id_;
            ::google::protobuf::uint64 m_index_;
            mutable ::google::protobuf::internal::CachedSize _cached_size_;
            friend struct ::protobuf_hamilton_2eproto::TableStruct;
        };
        // -------------------------------------------------------------------

        class Output
            : public ::google::protobuf::
                  Message /* @@protoc_insertion_point(class_definition:proto.hamilton.Output)
                           */
        {
          public:
            Output();
            virtual ~Output();

            Output(const Output& from);

            inline Output& operator=(const Output& from) {
                CopyFrom(from);
                return *this;
            }
#if LANG_CXX11
            Output(Output&& from) noexcept : Output() {
                *this = ::std::move(from);
            }

            inline Output& operator=(Output&& from) noexcept {
                if(GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
                    if(this != &from)
                        InternalSwap(&from);
                } else {
                    CopyFrom(from);
                }
                return *this;
            }
#endif
            static const ::google::protobuf::Descriptor* descriptor();
            static const Output& default_instance();

            static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
            static inline const Output* internal_default_instance() {
                return reinterpret_cast<const Output*>(
                    &_Output_default_instance_);
            }
            static constexpr int kIndexInFileMessages = 1;

            void Swap(Output* other);
            friend void swap(Output& a, Output& b) {
                a.Swap(&b);
            }

            // implements Message
            // ----------------------------------------------

            inline Output* New() const final {
                return CreateMaybeMessage<Output>(NULL);
            }

            Output* New(::google::protobuf::Arena* arena) const final {
                return CreateMaybeMessage<Output>(arena);
            }
            void CopyFrom(const ::google::protobuf::Message& from) final;
            void MergeFrom(const ::google::protobuf::Message& from) final;
            void CopyFrom(const Output& from);
            void MergeFrom(const Output& from);
            void Clear() final;
            bool IsInitialized() const final;

            size_t ByteSizeLong() const final;
            bool MergePartialFromCodedStream(
                ::google::protobuf::io::CodedInputStream* input) final;
            void SerializeWithCachedSizes(
                ::google::protobuf::io::CodedOutputStream* output) const final;
            ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
                bool deterministic,
                ::google::protobuf::uint8* target) const final;
            int GetCachedSize() const final {
                return _cached_size_.Get();
            }

          private:
            void SharedCtor();
            void SharedDtor();
            void SetCachedSize(int size) const final;
            void InternalSwap(Output* other);

          private:
            inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
                return NULL;
            }
            inline void* MaybeArenaPtr() const {
                return NULL;
            }

          public:
            ::google::protobuf::Metadata GetMetadata() const final;

            // nested types
            // ----------------------------------------------------

            // accessors
            // -------------------------------------------------------

            // string m_witness_program_commitment = 1;
            void clear_m_witness_program_commitment();
            static const int kMWitnessProgramCommitmentFieldNumber = 1;
            const ::std::string& m_witness_program_commitment() const;
            void set_m_witness_program_commitment(const ::std::string& value);
#if LANG_CXX11
            void set_m_witness_program_commitment(::std::string&& value);
#endif
            void set_m_witness_program_commitment(const char* value);
            void set_m_witness_program_commitment(const char* value,
                                                  size_t size);
            ::std::string* mutable_m_witness_program_commitment();
            ::std::string* release_m_witness_program_commitment();
            void set_allocated_m_witness_program_commitment(
                ::std::string* m_witness_program_commitment);

            // uint64 m_value = 2;
            void clear_m_value();
            static const int kMValueFieldNumber = 2;
            ::google::protobuf::uint64 m_value() const;
            void set_m_value(::google::protobuf::uint64 value);

            // @@protoc_insertion_point(class_scope:proto.hamilton.Output)
          private:
            ::google::protobuf::internal::InternalMetadataWithArena
                _internal_metadata_;
            ::google::protobuf::internal::ArenaStringPtr
                m_witness_program_commitment_;
            ::google::protobuf::uint64 m_value_;
            mutable ::google::protobuf::internal::CachedSize _cached_size_;
            friend struct ::protobuf_hamilton_2eproto::TableStruct;
        };
        // -------------------------------------------------------------------

        class Input
            : public ::google::protobuf::
                  Message /* @@protoc_insertion_point(class_definition:proto.hamilton.Input)
                           */
        {
          public:
            Input();
            virtual ~Input();

            Input(const Input& from);

            inline Input& operator=(const Input& from) {
                CopyFrom(from);
                return *this;
            }
#if LANG_CXX11
            Input(Input&& from) noexcept : Input() {
                *this = ::std::move(from);
            }

            inline Input& operator=(Input&& from) noexcept {
                if(GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
                    if(this != &from)
                        InternalSwap(&from);
                } else {
                    CopyFrom(from);
                }
                return *this;
            }
#endif
            static const ::google::protobuf::Descriptor* descriptor();
            static const Input& default_instance();

            static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
            static inline const Input* internal_default_instance() {
                return reinterpret_cast<const Input*>(
                    &_Input_default_instance_);
            }
            static constexpr int kIndexInFileMessages = 2;

            void Swap(Input* other);
            friend void swap(Input& a, Input& b) {
                a.Swap(&b);
            }

            // implements Message
            // ----------------------------------------------

            inline Input* New() const final {
                return CreateMaybeMessage<Input>(NULL);
            }

            Input* New(::google::protobuf::Arena* arena) const final {
                return CreateMaybeMessage<Input>(arena);
            }
            void CopyFrom(const ::google::protobuf::Message& from) final;
            void MergeFrom(const ::google::protobuf::Message& from) final;
            void CopyFrom(const Input& from);
            void MergeFrom(const Input& from);
            void Clear() final;
            bool IsInitialized() const final;

            size_t ByteSizeLong() const final;
            bool MergePartialFromCodedStream(
                ::google::protobuf::io::CodedInputStream* input) final;
            void SerializeWithCachedSizes(
                ::google::protobuf::io::CodedOutputStream* output) const final;
            ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
                bool deterministic,
                ::google::protobuf::uint8* target) const final;
            int GetCachedSize() const final {
                return _cached_size_.Get();
            }

          private:
            void SharedCtor();
            void SharedDtor();
            void SetCachedSize(int size) const final;
            void InternalSwap(Input* other);

          private:
            inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
                return NULL;
            }
            inline void* MaybeArenaPtr() const {
                return NULL;
            }

          public:
            ::google::protobuf::Metadata GetMetadata() const final;

            // nested types
            // ----------------------------------------------------

            // accessors
            // -------------------------------------------------------

            // .proto.hamilton.OutPoint m_prevout = 1;
            bool has_m_prevout() const;
            void clear_m_prevout();
            static const int kMPrevoutFieldNumber = 1;

          private:
            const ::proto::hamilton::OutPoint& _internal_m_prevout() const;

          public:
            const ::proto::hamilton::OutPoint& m_prevout() const;
            ::proto::hamilton::OutPoint* release_m_prevout();
            ::proto::hamilton::OutPoint* mutable_m_prevout();
            void
            set_allocated_m_prevout(::proto::hamilton::OutPoint* m_prevout);

            // .proto.hamilton.Output m_prevout_data = 2;
            bool has_m_prevout_data() const;
            void clear_m_prevout_data();
            static const int kMPrevoutDataFieldNumber = 2;

          private:
            const ::proto::hamilton::Output& _internal_m_prevout_data() const;

          public:
            const ::proto::hamilton::Output& m_prevout_data() const;
            ::proto::hamilton::Output* release_m_prevout_data();
            ::proto::hamilton::Output* mutable_m_prevout_data();
            void set_allocated_m_prevout_data(
                ::proto::hamilton::Output* m_prevout_data);

            // @@protoc_insertion_point(class_scope:proto.hamilton.Input)
          private:
            ::google::protobuf::internal::InternalMetadataWithArena
                _internal_metadata_;
            ::proto::hamilton::OutPoint* m_prevout_;
            ::proto::hamilton::Output* m_prevout_data_;
            mutable ::google::protobuf::internal::CachedSize _cached_size_;
            friend struct ::protobuf_hamilton_2eproto::TableStruct;
        };
        // -------------------------------------------------------------------

        class TxRequest
            : public ::google::protobuf::
                  Message /* @@protoc_insertion_point(class_definition:proto.hamilton.TxRequest)
                           */
        {
          public:
            TxRequest();
            virtual ~TxRequest();

            TxRequest(const TxRequest& from);

            inline TxRequest& operator=(const TxRequest& from) {
                CopyFrom(from);
                return *this;
            }
#if LANG_CXX11
            TxRequest(TxRequest&& from) noexcept : TxRequest() {
                *this = ::std::move(from);
            }

            inline TxRequest& operator=(TxRequest&& from) noexcept {
                if(GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
                    if(this != &from)
                        InternalSwap(&from);
                } else {
                    CopyFrom(from);
                }
                return *this;
            }
#endif
            static const ::google::protobuf::Descriptor* descriptor();
            static const TxRequest& default_instance();

            static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
            static inline const TxRequest* internal_default_instance() {
                return reinterpret_cast<const TxRequest*>(
                    &_TxRequest_default_instance_);
            }
            static constexpr int kIndexInFileMessages = 3;

            void Swap(TxRequest* other);
            friend void swap(TxRequest& a, TxRequest& b) {
                a.Swap(&b);
            }

            // implements Message
            // ----------------------------------------------

            inline TxRequest* New() const final {
                return CreateMaybeMessage<TxRequest>(NULL);
            }

            TxRequest* New(::google::protobuf::Arena* arena) const final {
                return CreateMaybeMessage<TxRequest>(arena);
            }
            void CopyFrom(const ::google::protobuf::Message& from) final;
            void MergeFrom(const ::google::protobuf::Message& from) final;
            void CopyFrom(const TxRequest& from);
            void MergeFrom(const TxRequest& from);
            void Clear() final;
            bool IsInitialized() const final;

            size_t ByteSizeLong() const final;
            bool MergePartialFromCodedStream(
                ::google::protobuf::io::CodedInputStream* input) final;
            void SerializeWithCachedSizes(
                ::google::protobuf::io::CodedOutputStream* output) const final;
            ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
                bool deterministic,
                ::google::protobuf::uint8* target) const final;
            int GetCachedSize() const final {
                return _cached_size_.Get();
            }

            cbdc::transaction::full_tx to_full_tx();

          private:
            void SharedCtor();
            void SharedDtor();
            void SetCachedSize(int size) const final;
            void InternalSwap(TxRequest* other);

          private:
            inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
                return NULL;
            }
            inline void* MaybeArenaPtr() const {
                return NULL;
            }

          public:
            ::google::protobuf::Metadata GetMetadata() const final;

            // nested types
            // ----------------------------------------------------

            // accessors
            // -------------------------------------------------------

            // repeated .proto.hamilton.Input m_inputs = 1;
            int m_inputs_size() const;
            void clear_m_inputs();
            static const int kMInputsFieldNumber = 1;
            ::proto::hamilton::Input* mutable_m_inputs(int index);
            ::google::protobuf::RepeatedPtrField<::proto::hamilton::Input>*
            mutable_m_inputs();
            const ::proto::hamilton::Input& m_inputs(int index) const;
            ::proto::hamilton::Input* add_m_inputs();
            const ::google::protobuf::RepeatedPtrField<
                ::proto::hamilton::Input>&
            m_inputs() const;

            // repeated .proto.hamilton.Output m_outputs = 2;
            int m_outputs_size() const;
            void clear_m_outputs();
            static const int kMOutputsFieldNumber = 2;
            ::proto::hamilton::Output* mutable_m_outputs(int index);
            ::google::protobuf::RepeatedPtrField<::proto::hamilton::Output>*
            mutable_m_outputs();
            const ::proto::hamilton::Output& m_outputs(int index) const;
            ::proto::hamilton::Output* add_m_outputs();
            const ::google::protobuf::RepeatedPtrField<
                ::proto::hamilton::Output>&
            m_outputs() const;

            // repeated bytes m_witness = 3;
            int m_witness_size() const;
            void clear_m_witness();
            static const int kMWitnessFieldNumber = 3;
            const ::std::string& m_witness(int index) const;
            ::std::string* mutable_m_witness(int index);
            void set_m_witness(int index, const ::std::string& value);
#if LANG_CXX11
            void set_m_witness(int index, ::std::string&& value);
#endif
            void set_m_witness(int index, const char* value);
            void set_m_witness(int index, const void* value, size_t size);
            ::std::string* add_m_witness();
            void add_m_witness(const ::std::string& value);
#if LANG_CXX11
            void add_m_witness(::std::string&& value);
#endif
            void add_m_witness(const char* value);
            void add_m_witness(const void* value, size_t size);
            const ::google::protobuf::RepeatedPtrField<::std::string>&
            m_witness() const;
            ::google::protobuf::RepeatedPtrField<::std::string>*
            mutable_m_witness();

            // @@protoc_insertion_point(class_scope:proto.hamilton.TxRequest)
          private:
            ::google::protobuf::internal::InternalMetadataWithArena
                _internal_metadata_;
            ::google::protobuf::RepeatedPtrField<::proto::hamilton::Input>
                m_inputs_;
            ::google::protobuf::RepeatedPtrField<::proto::hamilton::Output>
                m_outputs_;
            ::google::protobuf::RepeatedPtrField<::std::string> m_witness_;
            mutable ::google::protobuf::internal::CachedSize _cached_size_;
            friend struct ::protobuf_hamilton_2eproto::TableStruct;
        };
        // -------------------------------------------------------------------

        class TxResponse
            : public ::google::protobuf::
                  Message /* @@protoc_insertion_point(class_definition:proto.hamilton.TxResponse)
                           */
        {
          public:
            TxResponse();
            virtual ~TxResponse();

            TxResponse(const TxResponse& from);

            inline TxResponse& operator=(const TxResponse& from) {
                CopyFrom(from);
                return *this;
            }
#if LANG_CXX11
            TxResponse(TxResponse&& from) noexcept : TxResponse() {
                *this = ::std::move(from);
            }

            inline TxResponse& operator=(TxResponse&& from) noexcept {
                if(GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
                    if(this != &from)
                        InternalSwap(&from);
                } else {
                    CopyFrom(from);
                }
                return *this;
            }
#endif
            static const ::google::protobuf::Descriptor* descriptor();
            static const TxResponse& default_instance();

            static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
            static inline const TxResponse* internal_default_instance() {
                return reinterpret_cast<const TxResponse*>(
                    &_TxResponse_default_instance_);
            }
            static constexpr int kIndexInFileMessages = 4;

            void Swap(TxResponse* other);
            friend void swap(TxResponse& a, TxResponse& b) {
                a.Swap(&b);
            }

            // implements Message
            // ----------------------------------------------

            inline TxResponse* New() const final {
                return CreateMaybeMessage<TxResponse>(NULL);
            }

            TxResponse* New(::google::protobuf::Arena* arena) const final {
                return CreateMaybeMessage<TxResponse>(arena);
            }
            void CopyFrom(const ::google::protobuf::Message& from) final;
            void MergeFrom(const ::google::protobuf::Message& from) final;
            void CopyFrom(const TxResponse& from);
            void MergeFrom(const TxResponse& from);
            void Clear() final;
            bool IsInitialized() const final;

            size_t ByteSizeLong() const final;
            bool MergePartialFromCodedStream(
                ::google::protobuf::io::CodedInputStream* input) final;
            void SerializeWithCachedSizes(
                ::google::protobuf::io::CodedOutputStream* output) const final;
            ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
                bool deterministic,
                ::google::protobuf::uint8* target) const final;
            int GetCachedSize() const final {
                return _cached_size_.Get();
            }

          private:
            void SharedCtor();
            void SharedDtor();
            void SetCachedSize(int size) const final;
            void InternalSwap(TxResponse* other);

          private:
            inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
                return NULL;
            }
            inline void* MaybeArenaPtr() const {
                return NULL;
            }

          public:
            ::google::protobuf::Metadata GetMetadata() const final;

            // nested types
            // ----------------------------------------------------

            // accessors
            // -------------------------------------------------------

            // @@protoc_insertion_point(class_scope:proto.hamilton.TxResponse)
          private:
            ::google::protobuf::internal::InternalMetadataWithArena
                _internal_metadata_;
            mutable ::google::protobuf::internal::CachedSize _cached_size_;
            friend struct ::protobuf_hamilton_2eproto::TableStruct;
        };
        // ===================================================================

        // ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif // __GNUC__
       // OutPoint

        // string m_tx_id = 1;
        inline void OutPoint::clear_m_tx_id() {
            m_tx_id_.ClearToEmptyNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        inline const ::std::string& OutPoint::m_tx_id() const {
            // @@protoc_insertion_point(field_get:proto.hamilton.OutPoint.m_tx_id)
            return m_tx_id_.GetNoArena();
        }
        inline void OutPoint::set_m_tx_id(const ::std::string& value) {
            m_tx_id_.SetNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                value);
            // @@protoc_insertion_point(field_set:proto.hamilton.OutPoint.m_tx_id)
        }
#if LANG_CXX11
        inline void OutPoint::set_m_tx_id(::std::string&& value) {
            m_tx_id_.SetNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                ::std::move(value));
            // @@protoc_insertion_point(field_set_rvalue:proto.hamilton.OutPoint.m_tx_id)
        }
#endif
        inline void OutPoint::set_m_tx_id(const char* value) {
            GOOGLE_DCHECK(value != NULL);

            m_tx_id_.SetNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                ::std::string(value));
            // @@protoc_insertion_point(field_set_char:proto.hamilton.OutPoint.m_tx_id)
        }
        inline void OutPoint::set_m_tx_id(const char* value, size_t size) {
            m_tx_id_.SetNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                ::std::string(reinterpret_cast<const char*>(value), size));
            // @@protoc_insertion_point(field_set_pointer:proto.hamilton.OutPoint.m_tx_id)
        }
        inline ::std::string* OutPoint::mutable_m_tx_id() {
            // @@protoc_insertion_point(field_mutable:proto.hamilton.OutPoint.m_tx_id)
            return m_tx_id_.MutableNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        inline ::std::string* OutPoint::release_m_tx_id() {
            // @@protoc_insertion_point(field_release:proto.hamilton.OutPoint.m_tx_id)

            return m_tx_id_.ReleaseNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        inline void OutPoint::set_allocated_m_tx_id(::std::string* m_tx_id) {
            if(m_tx_id != NULL) {
            } else {
            }
            m_tx_id_.SetAllocatedNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                m_tx_id);
            // @@protoc_insertion_point(field_set_allocated:proto.hamilton.OutPoint.m_tx_id)
        }

        // uint64 m_index = 2;
        inline void OutPoint::clear_m_index() {
            m_index_ = GOOGLE_ULONGLONG(0);
        }
        inline ::google::protobuf::uint64 OutPoint::m_index() const {
            // @@protoc_insertion_point(field_get:proto.hamilton.OutPoint.m_index)
            return m_index_;
        }
        inline void OutPoint::set_m_index(::google::protobuf::uint64 value) {
            m_index_ = value;
            // @@protoc_insertion_point(field_set:proto.hamilton.OutPoint.m_index)
        }

        // -------------------------------------------------------------------

        // Output

        // string m_witness_program_commitment = 1;
        inline void Output::clear_m_witness_program_commitment() {
            m_witness_program_commitment_.ClearToEmptyNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        inline const ::std::string&
        Output::m_witness_program_commitment() const {
            // @@protoc_insertion_point(field_get:proto.hamilton.Output.m_witness_program_commitment)
            return m_witness_program_commitment_.GetNoArena();
        }
        inline void
        Output::set_m_witness_program_commitment(const ::std::string& value) {
            m_witness_program_commitment_.SetNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                value);
            // @@protoc_insertion_point(field_set:proto.hamilton.Output.m_witness_program_commitment)
        }
#if LANG_CXX11
        inline void
        Output::set_m_witness_program_commitment(::std::string&& value) {
            m_witness_program_commitment_.SetNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                ::std::move(value));
            // @@protoc_insertion_point(field_set_rvalue:proto.hamilton.Output.m_witness_program_commitment)
        }
#endif
        inline void
        Output::set_m_witness_program_commitment(const char* value) {
            GOOGLE_DCHECK(value != NULL);

            m_witness_program_commitment_.SetNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                ::std::string(value));
            // @@protoc_insertion_point(field_set_char:proto.hamilton.Output.m_witness_program_commitment)
        }
        inline void Output::set_m_witness_program_commitment(const char* value,
                                                             size_t size) {
            m_witness_program_commitment_.SetNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                ::std::string(reinterpret_cast<const char*>(value), size));
            // @@protoc_insertion_point(field_set_pointer:proto.hamilton.Output.m_witness_program_commitment)
        }
        inline ::std::string* Output::mutable_m_witness_program_commitment() {
            // @@protoc_insertion_point(field_mutable:proto.hamilton.Output.m_witness_program_commitment)
            return m_witness_program_commitment_.MutableNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        inline ::std::string* Output::release_m_witness_program_commitment() {
            // @@protoc_insertion_point(field_release:proto.hamilton.Output.m_witness_program_commitment)

            return m_witness_program_commitment_.ReleaseNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited());
        }
        inline void Output::set_allocated_m_witness_program_commitment(
            ::std::string* m_witness_program_commitment) {
            if(m_witness_program_commitment != NULL) {
            } else {
            }
            m_witness_program_commitment_.SetAllocatedNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                m_witness_program_commitment);
            // @@protoc_insertion_point(field_set_allocated:proto.hamilton.Output.m_witness_program_commitment)
        }

        // uint64 m_value = 2;
        inline void Output::clear_m_value() {
            m_value_ = GOOGLE_ULONGLONG(0);
        }
        inline ::google::protobuf::uint64 Output::m_value() const {
            // @@protoc_insertion_point(field_get:proto.hamilton.Output.m_value)
            return m_value_;
        }
        inline void Output::set_m_value(::google::protobuf::uint64 value) {
            m_value_ = value;
            // @@protoc_insertion_point(field_set:proto.hamilton.Output.m_value)
        }

        // -------------------------------------------------------------------

        // Input

        // .proto.hamilton.OutPoint m_prevout = 1;
        inline bool Input::has_m_prevout() const {
            return this != internal_default_instance() && m_prevout_ != NULL;
        }
        inline void Input::clear_m_prevout() {
            if(GetArenaNoVirtual() == NULL && m_prevout_ != NULL) {
                delete m_prevout_;
            }
            m_prevout_ = NULL;
        }
        inline const ::proto::hamilton::OutPoint&
        Input::_internal_m_prevout() const {
            return *m_prevout_;
        }
        inline const ::proto::hamilton::OutPoint& Input::m_prevout() const {
            const ::proto::hamilton::OutPoint* p = m_prevout_;
            // @@protoc_insertion_point(field_get:proto.hamilton.Input.m_prevout)
            return p != NULL
                     ? *p
                     : *reinterpret_cast<const ::proto::hamilton::OutPoint*>(
                         &::proto::hamilton::_OutPoint_default_instance_);
        }
        inline ::proto::hamilton::OutPoint* Input::release_m_prevout() {
            // @@protoc_insertion_point(field_release:proto.hamilton.Input.m_prevout)

            ::proto::hamilton::OutPoint* temp = m_prevout_;
            m_prevout_ = NULL;
            return temp;
        }
        inline ::proto::hamilton::OutPoint* Input::mutable_m_prevout() {
            if(m_prevout_ == NULL) {
                auto* p = CreateMaybeMessage<::proto::hamilton::OutPoint>(
                    GetArenaNoVirtual());
                m_prevout_ = p;
            }
            // @@protoc_insertion_point(field_mutable:proto.hamilton.Input.m_prevout)
            return m_prevout_;
        }
        inline void Input::set_allocated_m_prevout(
            ::proto::hamilton::OutPoint* m_prevout) {
            ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
            if(message_arena == NULL) {
                delete m_prevout_;
            }
            if(m_prevout) {
                ::google::protobuf::Arena* submessage_arena = NULL;
                if(message_arena != submessage_arena) {
                    m_prevout = ::google::protobuf::internal::GetOwnedMessage(
                        message_arena,
                        m_prevout,
                        submessage_arena);
                }
            } else {
            }
            m_prevout_ = m_prevout;
            // @@protoc_insertion_point(field_set_allocated:proto.hamilton.Input.m_prevout)
        }

        // .proto.hamilton.Output m_prevout_data = 2;
        inline bool Input::has_m_prevout_data() const {
            return this != internal_default_instance()
                && m_prevout_data_ != NULL;
        }
        inline void Input::clear_m_prevout_data() {
            if(GetArenaNoVirtual() == NULL && m_prevout_data_ != NULL) {
                delete m_prevout_data_;
            }
            m_prevout_data_ = NULL;
        }
        inline const ::proto::hamilton::Output&
        Input::_internal_m_prevout_data() const {
            return *m_prevout_data_;
        }
        inline const ::proto::hamilton::Output& Input::m_prevout_data() const {
            const ::proto::hamilton::Output* p = m_prevout_data_;
            // @@protoc_insertion_point(field_get:proto.hamilton.Input.m_prevout_data)
            return p != NULL
                     ? *p
                     : *reinterpret_cast<const ::proto::hamilton::Output*>(
                         &::proto::hamilton::_Output_default_instance_);
        }
        inline ::proto::hamilton::Output* Input::release_m_prevout_data() {
            // @@protoc_insertion_point(field_release:proto.hamilton.Input.m_prevout_data)

            ::proto::hamilton::Output* temp = m_prevout_data_;
            m_prevout_data_ = NULL;
            return temp;
        }
        inline ::proto::hamilton::Output* Input::mutable_m_prevout_data() {
            if(m_prevout_data_ == NULL) {
                auto* p = CreateMaybeMessage<::proto::hamilton::Output>(
                    GetArenaNoVirtual());
                m_prevout_data_ = p;
            }
            // @@protoc_insertion_point(field_mutable:proto.hamilton.Input.m_prevout_data)
            return m_prevout_data_;
        }
        inline void Input::set_allocated_m_prevout_data(
            ::proto::hamilton::Output* m_prevout_data) {
            ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
            if(message_arena == NULL) {
                delete m_prevout_data_;
            }
            if(m_prevout_data) {
                ::google::protobuf::Arena* submessage_arena = NULL;
                if(message_arena != submessage_arena) {
                    m_prevout_data
                        = ::google::protobuf::internal::GetOwnedMessage(
                            message_arena,
                            m_prevout_data,
                            submessage_arena);
                }
            } else {
            }
            m_prevout_data_ = m_prevout_data;
            // @@protoc_insertion_point(field_set_allocated:proto.hamilton.Input.m_prevout_data)
        }

        // -------------------------------------------------------------------

        // TxRequest

        // repeated .proto.hamilton.Input m_inputs = 1;
        inline int TxRequest::m_inputs_size() const {
            return m_inputs_.size();
        }
        inline void TxRequest::clear_m_inputs() {
            m_inputs_.Clear();
        }
        inline ::proto::hamilton::Input*
        TxRequest::mutable_m_inputs(int index) {
            // @@protoc_insertion_point(field_mutable:proto.hamilton.TxRequest.m_inputs)
            return m_inputs_.Mutable(index);
        }
        inline ::google::protobuf::RepeatedPtrField<::proto::hamilton::Input>*
        TxRequest::mutable_m_inputs() {
            // @@protoc_insertion_point(field_mutable_list:proto.hamilton.TxRequest.m_inputs)
            return &m_inputs_;
        }
        inline const ::proto::hamilton::Input&
        TxRequest::m_inputs(int index) const {
            // @@protoc_insertion_point(field_get:proto.hamilton.TxRequest.m_inputs)
            return m_inputs_.Get(index);
        }
        inline ::proto::hamilton::Input* TxRequest::add_m_inputs() {
            // @@protoc_insertion_point(field_add:proto.hamilton.TxRequest.m_inputs)
            return m_inputs_.Add();
        }
        inline const ::google::protobuf::RepeatedPtrField<
            ::proto::hamilton::Input>&
        TxRequest::m_inputs() const {
            // @@protoc_insertion_point(field_list:proto.hamilton.TxRequest.m_inputs)
            return m_inputs_;
        }

        // repeated .proto.hamilton.Output m_outputs = 2;
        inline int TxRequest::m_outputs_size() const {
            return m_outputs_.size();
        }
        inline void TxRequest::clear_m_outputs() {
            m_outputs_.Clear();
        }
        inline ::proto::hamilton::Output*
        TxRequest::mutable_m_outputs(int index) {
            // @@protoc_insertion_point(field_mutable:proto.hamilton.TxRequest.m_outputs)
            return m_outputs_.Mutable(index);
        }
        inline ::google::protobuf::RepeatedPtrField<::proto::hamilton::Output>*
        TxRequest::mutable_m_outputs() {
            // @@protoc_insertion_point(field_mutable_list:proto.hamilton.TxRequest.m_outputs)
            return &m_outputs_;
        }
        inline const ::proto::hamilton::Output&
        TxRequest::m_outputs(int index) const {
            // @@protoc_insertion_point(field_get:proto.hamilton.TxRequest.m_outputs)
            return m_outputs_.Get(index);
        }
        inline ::proto::hamilton::Output* TxRequest::add_m_outputs() {
            // @@protoc_insertion_point(field_add:proto.hamilton.TxRequest.m_outputs)
            return m_outputs_.Add();
        }
        inline const ::google::protobuf::RepeatedPtrField<
            ::proto::hamilton::Output>&
        TxRequest::m_outputs() const {
            // @@protoc_insertion_point(field_list:proto.hamilton.TxRequest.m_outputs)
            return m_outputs_;
        }

        // repeated bytes m_witness = 3;
        inline int TxRequest::m_witness_size() const {
            return m_witness_.size();
        }
        inline void TxRequest::clear_m_witness() {
            m_witness_.Clear();
        }
        inline const ::std::string& TxRequest::m_witness(int index) const {
            // @@protoc_insertion_point(field_get:proto.hamilton.TxRequest.m_witness)
            return m_witness_.Get(index);
        }
        inline ::std::string* TxRequest::mutable_m_witness(int index) {
            // @@protoc_insertion_point(field_mutable:proto.hamilton.TxRequest.m_witness)
            return m_witness_.Mutable(index);
        }
        inline void TxRequest::set_m_witness(int index,
                                             const ::std::string& value) {
            // @@protoc_insertion_point(field_set:proto.hamilton.TxRequest.m_witness)
            m_witness_.Mutable(index)->assign(value);
        }
#if LANG_CXX11
        inline void TxRequest::set_m_witness(int index,
                                             ::std::string&& value) {
            // @@protoc_insertion_point(field_set:proto.hamilton.TxRequest.m_witness)
            m_witness_.Mutable(index)->assign(std::move(value));
        }
#endif
        inline void TxRequest::set_m_witness(int index, const char* value) {
            GOOGLE_DCHECK(value != NULL);
            m_witness_.Mutable(index)->assign(value);
            // @@protoc_insertion_point(field_set_char:proto.hamilton.TxRequest.m_witness)
        }
        inline void
        TxRequest::set_m_witness(int index, const void* value, size_t size) {
            m_witness_.Mutable(index)->assign(
                reinterpret_cast<const char*>(value),
                size);
            // @@protoc_insertion_point(field_set_pointer:proto.hamilton.TxRequest.m_witness)
        }
        inline ::std::string* TxRequest::add_m_witness() {
            // @@protoc_insertion_point(field_add_mutable:proto.hamilton.TxRequest.m_witness)
            return m_witness_.Add();
        }
        inline void TxRequest::add_m_witness(const ::std::string& value) {
            m_witness_.Add()->assign(value);
            // @@protoc_insertion_point(field_add:proto.hamilton.TxRequest.m_witness)
        }
#if LANG_CXX11
        inline void TxRequest::add_m_witness(::std::string&& value) {
            m_witness_.Add(std::move(value));
            // @@protoc_insertion_point(field_add:proto.hamilton.TxRequest.m_witness)
        }
#endif
        inline void TxRequest::add_m_witness(const char* value) {
            GOOGLE_DCHECK(value != NULL);
            m_witness_.Add()->assign(value);
            // @@protoc_insertion_point(field_add_char:proto.hamilton.TxRequest.m_witness)
        }
        inline void TxRequest::add_m_witness(const void* value, size_t size) {
            m_witness_.Add()->assign(reinterpret_cast<const char*>(value),
                                     size);
            // @@protoc_insertion_point(field_add_pointer:proto.hamilton.TxRequest.m_witness)
        }
        inline const ::google::protobuf::RepeatedPtrField<::std::string>&
        TxRequest::m_witness() const {
            // @@protoc_insertion_point(field_list:proto.hamilton.TxRequest.m_witness)
            return m_witness_;
        }
        inline ::google::protobuf::RepeatedPtrField<::std::string>*
        TxRequest::mutable_m_witness() {
            // @@protoc_insertion_point(field_mutable_list:proto.hamilton.TxRequest.m_witness)
            return &m_witness_;
        }

        // -------------------------------------------------------------------

        // TxResponse

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif // __GNUC__
       // -------------------------------------------------------------------

        // -------------------------------------------------------------------

        // -------------------------------------------------------------------

        // -------------------------------------------------------------------

        // @@protoc_insertion_point(namespace_scope)

    } // namespace hamilton
} // namespace proto

// @@protoc_insertion_point(global_scope)

#endif // PROTOBUF_INCLUDED_hamilton_2eproto
